FROM osrf/ros:humble-desktop

ENV DEBIAN_FRONTEND=noninteractive
# 기본 패키지 설치
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    python3-colcon-common-extensions \
    python3-pip \
    python3-rosdep \
    python3-vcstool \
    wget \
    lsb-release \
    software-properties-common \
    gnupg \
    libtinyxml2-dev libasio-dev \
    && rm -rf /var/lib/apt/lists/*

# LLVM/Clang 16 설치 (libFuzzer 지원)
# 2. Clang 16 및 libFuzzer 설치
RUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - && \
    add-apt-repository "deb http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-16 main" && \
    apt-get update && apt-get install -y \
    clang-16 llvm-16 libclang-16-dev libfuzzer-16-dev && \
    rm -rf /var/lib/apt/lists/*

# Clang을 기본 컴파일러로 설정
ENV CC=clang-16
ENV CXX=clang++-16

RUN mkdir -p /fastdds_ws/src
# 5-A. foonathan_memory_vendor 설치
WORKDIR /fastdds_ws/src
RUN git clone https://github.com/eProsima/foonathan_memory_vendor.git

# 5-B. foonathan_memory_vendor 빌드 및 설치
WORKDIR /fastdds_ws/src/foonathan_memory_vendor/build
RUN cmake .. \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_C_COMPILER=clang-16 \
    -DCMAKE_CXX_COMPILER=clang++-16 && \
    make -j$(nproc) && make install

# 6-A. Fast-CDR + Fast-DDS 소스 클론
WORKDIR /fastdds_ws/src
RUN git clone https://github.com/eProsima/Fast-CDR.git && \
    git clone https://github.com/eProsima/Fast-DDS.git && \
    cd Fast-DDS && git submodule update --init --recursive

# 6-B. Fast-CDR 빌드
WORKDIR /fastdds_ws/src/Fast-CDR/build
RUN cmake .. \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_C_COMPILER=clang-16 \
    -DCMAKE_CXX_COMPILER=clang++-16 \
    -DCMAKE_C_FLAGS="-fsanitize=address -fno-omit-frame-pointer -O1" \
    -DCMAKE_CXX_FLAGS="-fsanitize=address -fno-omit-frame-pointer -O1" && \
    make -j$(nproc) && make install

# 6-C. Fast-DDS 빌드
WORKDIR /fastdds_ws/src/Fast-DDS/build
RUN cmake .. \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_C_COMPILER=clang-16 \
    -DCMAKE_CXX_COMPILER=clang++-16 \
    -DCMAKE_C_FLAGS="-fsanitize=address -fno-omit-frame-pointer -O1" \
    -DCMAKE_CXX_FLAGS="-fsanitize=address -fno-omit-frame-pointer -O1" && \
    make -j$(nproc) && make install


# Turtlebot3 관련 패키지 설치
RUN apt-get update && apt-get install -y \
    ros-humble-dynamixel-sdk \
    ros-humble-turtlebot3-msgs \
    ros-humble-turtlebot3 \
    && rm -rf /var/lib/apt/lists/*

# 실행할 쉘 스크립트 추가
RUN echo '#!/bin/bash\nsource /opt/ros/humble/setup.bash\nexec "$@"' > /ros_entrypoint.sh && \
    chmod +x /ros_entrypoint.sh

# 작업 디렉토리 생성
WORKDIR /turtlebot3_ws
RUN mkdir -p /turtlebot3_ws/src

# Turtlebot3 소스 코드 다운로드
RUN cd /turtlebot3_ws/src && \
    git clone -b humble https://github.com/ROBOTIS-GIT/DynamixelSDK.git && \
    git clone -b humble https://github.com/ROBOTIS-GIT/turtlebot3_msgs.git && \
    git clone -b humble https://github.com/ROBOTIS-GIT/turtlebot3.git

# ASAN 및 FUZZER를 위한 컴파일 플래그 설정
ENV CXXFLAGS="-fsanitize=address,fuzzer-no-link -fno-omit-frame-pointer -O1" \
    CFLAGS="-fsanitize=address,fuzzer-no-link -fno-omit-frame-pointer -O1" \
    LDFLAGS="-fsanitize=address,fuzzer-no-link"

# 의존성 설치
RUN cd /turtlebot3_ws && \
    . /opt/ros/humble/setup.sh && \
    rosdep update && \
    rosdep install --from-paths src --ignore-src --rosdistro humble -y

# Turtlebot3 빌드
RUN cd /turtlebot3_ws && \
    . /opt/ros/humble/setup.sh && \
    colcon build --symlink-install --cmake-args -DCMAKE_C_COMPILER=clang-16 -DCMAKE_CXX_COMPILER=clang++-16

# Turtlebot3 모델 환경 변수 설정
ENV TURTLEBOT3_MODEL=burger


# 엔트리포인트 업데이트
RUN echo '#!/bin/bash\nsource /opt/ros/humble/setup.bash\nsource /turtlebot3_ws/install/setup.bash\nsource /fuzz_ws/install/setup.bash\nexec "$@"' > /ros_entrypoint.sh && \
    chmod +x /ros_entrypoint.sh

ENV ASAN_OPTIONS="detect_leaks=0:new_delete_type_mismatch=0:handle_segv=0:abort_on_error=0:symbolize=1"
ENTRYPOINT ["/ros_entrypoint.sh"]
CMD ["bash"]
